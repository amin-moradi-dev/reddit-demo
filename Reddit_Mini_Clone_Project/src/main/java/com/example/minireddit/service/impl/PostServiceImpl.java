package com.example.minireddit.service.impl; import com.example.minireddit.model.*;
import com.example.minireddit.service.PostService; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import org.springframework.data.domain.*; import java.util.*; @Service @Transactional public class PostServiceImpl implements PostService { private final PostRepository postRepo; public PostServiceImpl(PostRepository postRepo){ this.postRepo=postRepo; } public Post create(Post p){ return postRepo.save(p);} public Optional<Post> findById(Long id){ return postRepo.findById(id);} public Page<Post> listHome(Pageable pageable){ return postRepo.findByParentIsNullOrderByCreationTimeDesc(pageable);} public Page<Post> listByCommunity(Community c, Pageable pageable){ return postRepo.findByCommunityAndParentIsNullOrderByCreationTimeDesc(c, pageable);} public void deleteOwned(Long id, Long currentUserId){ Post p=postRepo.findById(id).orElseThrow(); if(!p.getAuthor().getId().equals(currentUserId)) throw new RuntimeException("Access denied"); postRepo.delete(p);} public List<Post> listComments(Post parent){ return postRepo.findByParentOrderByCreationTimeAsc(parent);} }