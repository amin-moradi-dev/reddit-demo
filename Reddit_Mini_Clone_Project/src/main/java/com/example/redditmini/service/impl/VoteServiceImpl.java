package com.example.redditmini.service.impl; import com.example.redditmini.model.*; import com.example.redditmini.repository.*; import com.example.redditmini.service.VoteService; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; @Service @Transactional public class VoteServiceImpl implements VoteService { private final VoteRepository voteRepo; private final PostRepository postRepo; private final UserRepository userRepo; public VoteServiceImpl(VoteRepository v, PostRepository p, UserRepository u){ voteRepo=v; postRepo=p; userRepo=u; } public int upvote(Long postId, Long userId){ return apply(postId,userId,1);} public int downvote(Long postId, Long userId){ return apply(postId,userId,-1);} private int apply(Long postId, Long userId, int val){ Post post=postRepo.findById(postId).orElseThrow(); User user=userRepo.findById(userId).orElseThrow(); Vote v=voteRepo.findByUserAndPost(user,post).orElseGet(()->{ Vote nv=new Vote(); nv.setUser(user); nv.setPost(post); return nv; }); v.setValue(val); voteRepo.save(v); return scoreForPost(postId);} public int scoreForPost(Long postId){ return voteRepo.findAll().stream().filter(x->x.getPost().getId().equals(postId)).mapToInt(Vote::getValue).sum(); } }