package com.example.redditmini.security; import com.example.redditmini.model.User; import com.example.redditmini.repository.UserRepository; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.*; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.security.web.SecurityFilterChain; import java.util.*; import java.util.stream.Collectors; @Configuration public class SecurityConfig { @Bean public SecurityFilterChain filterChain(HttpSecurity http) throws Exception { http.authorizeHttpRequests(a->a.requestMatchers("/login","/register","/css/**","/js/**","/uploads/**").permitAll().requestMatchers("/admin/**").hasAuthority("ADMIN").anyRequest().authenticated()).formLogin(f->f.loginPage("/login").defaultSuccessUrl("/", true).permitAll()).logout(l->l.logoutUrl("/logout").logoutSuccessUrl("/login?logout").permitAll()); return http.build(); } @Bean public PasswordEncoder passwordEncoder(){ return new BCryptPasswordEncoder(); } @Bean public UserDetailsService userDetailsService(UserRepository repo){ return username -> { User u = repo.findByUsername(username).orElseThrow(()->new UsernameNotFoundException("Not found")); return new org.springframework.security.core.userdetails.User(u.getUsername(), u.getPasswordHash(), Arrays.stream(u.getRoles().split(",")).map(String::trim).map(SimpleGrantedAuthority::new).collect(Collectors.toList())); }; } }